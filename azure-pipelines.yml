trigger:
  branches:
    include:
      - main
      - develop

pr:
  branches:
    include:
      - main
      - develop

variables:
  # –¢–µ–≥ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤ –ø–æ —Å–±–æ—Ä–∫–µ
  IMAGE_TAG: '$(Build.BuildId)'

stages:

# -----------------------------------
# 1) Build: —Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
# -----------------------------------
- stage: Build
  displayName: 'üõ†Ô∏è Build Docker images'
  jobs:
    - job: Build_Images
      displayName: 'Build backend & frontend images'
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self

        # Backend image
        - task: Docker@2
          displayName: 'Build backend image'
          inputs:
            command: build
            dockerfile: 'backend/Dockerfile'
            # containerRegistry: '<–≤–∞—à ACR-—Å–µ—Ä–≤–∏—Å-–∫–æ–Ω–Ω–µ–∫—à–Ω>' # –µ—Å–ª–∏ –ø—É—à–∏—Ç–µ –≤ ACR
            tags: |
              backend:$(IMAGE_TAG)

        # Frontend image
        - task: Docker@2
          displayName: 'Build frontend image'
          inputs:
            command: build
            dockerfile: 'frontend/Dockerfile'
            tags: |
              frontend:$(IMAGE_TAG)

# -----------------------------------
# 2) Test: –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
# -----------------------------------
- stage: Test
  displayName: 'üß™ Run tests'
  dependsOn: Build
  jobs:
    - job: Backend_Tests
      displayName: 'Backend: pytest'
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
        - script: |
            cd backend
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pytest --maxfail=1 --disable-warnings -q
          displayName: 'üíª Install & pytest'

    - job: Frontend_Tests
      displayName: 'Frontend: npm test'
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
        - script: |
            cd frontend
            npm ci
            npm test -- --watchAll=false --bail
          displayName: 'üì¶ npm ci & npm test'

# -----------------------------------
# 3) Deploy to Staging (auto on develop)
# -----------------------------------
- stage: Deploy_Staging
  displayName: 'üöÄ Deploy to Staging'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'develop'))
  jobs:
    - deployment: Staging
      displayName: 'Deploy to staging environment'
      environment: 'staging'      # —Å–æ–∑–¥–∞–π—Ç–µ Environment 'staging' –≤ Azure DevOps, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å approvals —Ç–∞–º
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  echo "üöÄ Deploying to staging server..."
                  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—à–∏–º –æ–±—Ä–∞–∑—ã –≤ registry –∏ ssh –Ω–∞ staging
                displayName: 'Staging deployment script'

# -----------------------------------
# 4) Deploy to Production (manual from main)
# -----------------------------------
- stage: Deploy_Production
  displayName: 'üõ°Ô∏è Deploy to Production'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
    - deployment: Production
      displayName: 'Deploy to production environment'
      environment: 'production'   # —Å–æ–∑–¥–∞–π—Ç–µ Environment 'production' –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–¥–µ—Å—å manual approval
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  echo "üõ°Ô∏è Deploying to production server..."
                  # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ: –ø—É—à–∏–º –æ–±—Ä–∞–∑—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ prod
                displayName: 'Production deployment script'
