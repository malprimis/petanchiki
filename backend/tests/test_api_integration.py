from datetime import datetime

import pytest
import pytest_asyncio
from httpx import ASGITransport
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker

from app.db.base import Base
from app.db.session import get_db
from app.main import app

DATABASE_URL = "sqlite+aiosqlite:///:memory:"
engine = create_async_engine(DATABASE_URL, echo=False)
AsyncSessionLocal = async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)


@pytest_asyncio.fixture
async def async_session():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)
    async with AsyncSessionLocal() as session:
        yield session

@pytest_asyncio.fixture(scope="function")
async def async_client(async_session):
    # –ü–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å get_db
    async def override_get_db():
        yield async_session
    app.dependency_overrides[get_db] = override_get_db

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ASGITransport –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    transport = ASGITransport(app=app)
    async with AsyncClient(transport=transport, base_url="http://test", follow_redirects=True) as client:
        yield client

    app.dependency_overrides.clear()


@pytest.mark.asyncio(loop_scope="session")
async def test_full_flow(async_client):
    # --- 1) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
    resp = await async_client.post(
        "/api/v1/auth/register",
        json={"email": "alice@example.com", "name": "Alice", "password": "secret123"}
    )
    assert resp.status_code == 201
    user = resp.json()
    assert user["email"] == "alice@example.com"
    user_id = user["id"]

    # --- 2) –õ–æ–≥–∏–Ω ---
    resp = await async_client.post(
        "/api/v1/auth/login",
        data={"username": "alice@example.com", "password": "secret123"},
        headers={"Content-Type": "application/x-www-form-urlencoded"}
    )
    assert resp.status_code == 200
    token = resp.json()["access_token"]
    auth_headers = {"Authorization": f"Bearer {token}"}

    # --- 3) GET /users/me ---
    resp = await async_client.get("/api/v1/users/me", headers=auth_headers)
    assert resp.status_code == 200
    assert resp.json()["id"] == user_id

    # --- 4) –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ---
    resp = await async_client.post(
        "/api/v1/groups/",
        json={"name": "Test Group", "description": "Desc"},
        headers=auth_headers
    )
    assert resp.status_code == 201
    group = resp.json()
    group_id = group["id"]

    # --- 5) –°–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø ---
    resp = await async_client.get("/api/v1/groups/", headers=auth_headers)
    assert resp.status_code == 200
    assert any(g["id"] == group_id for g in resp.json())

    # --- 6) –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    resp = await async_client.post(
        f"/api/v1/groups/{group_id}/categories",
        json={"name": "Food", "icon": "üçî"},
        headers=auth_headers
    )
    assert resp.status_code == 201
    category_id = resp.json()["id"]

    # --- 7) –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
    resp = await async_client.get(f"/api/v1/groups/{group_id}/categories", headers=auth_headers)
    assert resp.status_code == 200
    assert any(c["id"] == category_id for c in resp.json())

    # --- 8) –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
    tx_payload = {
        "group_id": group_id,
        "category_id": category_id,
        "amount": 42.5,
        "type": "expense",
        "description": "Lunch",
        "date": datetime.now().isoformat()
    }
    resp = await async_client.post("/api/v1/transactions", json=tx_payload, headers=auth_headers)
    assert resp.status_code == 201
    tx_id = resp.json()["id"]

    # --- 9) –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID ---
    resp = await async_client.get(f"/api/v1/transactions/{tx_id}", headers=auth_headers)
    assert resp.status_code == 200
    assert resp.json()["id"] == tx_id

    # --- 10) –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ---
    resp = await async_client.patch(
        f"/api/v1/transactions/{tx_id}",
        json={"description": "Dinner", "amount": 50.0},
        headers=auth_headers
    )
    assert resp.status_code == 200
    data = resp.json()
    assert data["amount"] == 50.0 and data["description"] == "Dinner"

    # --- 11) –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
    resp = await async_client.get(
        "/api/v1/transactions",
        params={"group_id": group_id, "skip": 0, "limit": 10},
        headers=auth_headers
    )
    assert resp.status_code == 200
    assert any(t["id"] == tx_id for t in resp.json())

    # --- 12) –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
    resp = await async_client.delete(f"/api/v1/transactions/{tx_id}", headers=auth_headers)
    assert resp.status_code == 204
    resp = await async_client.get(f"/api/v1/transactions/{tx_id}", headers=auth_headers)
    assert resp.status_code == 404
